/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.gerenciador.views.adm;

/**
 *
 * @author Victor
 */
import br.com.gerenciador.dao.CalendarioDao;
import br.com.gerenciador.dao.MateriaDao;
import br.com.gerenciador.dao.PermutaAulasDao;
import br.com.gerenciador.dao.TurmasDao;
import br.com.gerenciador.dao.UsuarioDao;
import br.com.gerenciador.entidades.Calendario;
import br.com.gerenciador.entidades.Materia;
import br.com.gerenciador.entidades.PermutaAulas;
import br.com.gerenciador.entidades.Turmas;
import br.com.gerenciador.entidades.Usuario;
import br.com.gerenciador.views.Tela_Login;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class Principal_Diretor extends javax.swing.JFrame {

    /**
     * Creates new form Diretor_Tela
     */
    public static int idDiretor;

    public Principal_Diretor() {
        initComponents();

        setExtendedState(MAXIMIZED_BOTH);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane_Diretor = new javax.swing.JDesktopPane(){
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(Color.white);
                g.fillRect(0, 0, getWidth(), getHeight());
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCadastroUsuario = new javax.swing.JMenuItem();
        jMenuItemCadastroTurma = new javax.swing.JMenuItem();
        jMenuItemCadastroMateria = new javax.swing.JMenuItem();
        jMenuItemCadastroCalendario = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItemCadastraHorario = new javax.swing.JMenuItem();
        jMenuItemAlteraHorario = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemRelatorioUsuarios = new javax.swing.JMenuItem();
        jMenuItemRelatorioMaterias = new javax.swing.JMenuItem();
        jMenuItemRelatorioTurmas = new javax.swing.JMenuItem();
        jMenuItemRelatorioCalendario = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItemPermutaAulas = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItemAlteraDados = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane_Diretor.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/plano.jpg"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(222, 222));

        jDesktopPane_Diretor.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane_DiretorLayout = new javax.swing.GroupLayout(jDesktopPane_Diretor);
        jDesktopPane_Diretor.setLayout(jDesktopPane_DiretorLayout);
        jDesktopPane_DiretorLayout.setHorizontalGroup(
            jDesktopPane_DiretorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 667, Short.MAX_VALUE)
        );
        jDesktopPane_DiretorLayout.setVerticalGroup(
            jDesktopPane_DiretorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(42, 106, 226));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/add.png"))); // NOI18N
        jMenu1.setText("Cadastro");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItemCadastroUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/usuario.png"))); // NOI18N
        jMenuItemCadastroUsuario.setText("Usuário");
        jMenuItemCadastroUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastroUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCadastroUsuario);

        jMenuItemCadastroTurma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/turma.png"))); // NOI18N
        jMenuItemCadastroTurma.setText("Turma");
        jMenuItemCadastroTurma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastroTurmaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCadastroTurma);

        jMenuItemCadastroMateria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/materia.png"))); // NOI18N
        jMenuItemCadastroMateria.setText("Matéria");
        jMenuItemCadastroMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastroMateriaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCadastroMateria);

        jMenuItemCadastroCalendario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/calendario.png"))); // NOI18N
        jMenuItemCadastroCalendario.setText("Calendário Acadêmico");
        jMenuItemCadastroCalendario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastroCalendarioActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCadastroCalendario);

        jMenuBar1.add(jMenu1);

        jMenu6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/horario.png"))); // NOI18N
        jMenu6.setText("Horário de Aulas");
        jMenu6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItemCadastraHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/add.png"))); // NOI18N
        jMenuItemCadastraHorario.setText("Cadastrar horário de aulas");
        jMenuItemCadastraHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCadastraHorarioActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemCadastraHorario);

        jMenuItemAlteraHorario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/alterar.png"))); // NOI18N
        jMenuItemAlteraHorario.setText("Alterar horário de aulas");
        jMenuItemAlteraHorario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAlteraHorarioActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemAlteraHorario);

        jMenuBar1.add(jMenu6);

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/relatorio-icone.png"))); // NOI18N
        jMenu4.setText("Relatórios");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItemRelatorioUsuarios.setText("Usuários");
        jMenuItemRelatorioUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRelatorioUsuariosActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRelatorioUsuarios);

        jMenuItemRelatorioMaterias.setText("Matérias");
        jMenuItemRelatorioMaterias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRelatorioMateriasActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRelatorioMaterias);

        jMenuItemRelatorioTurmas.setText("Turmas");
        jMenuItemRelatorioTurmas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRelatorioTurmasActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRelatorioTurmas);

        jMenuItemRelatorioCalendario.setText("Calendário acadêmico");
        jMenuItemRelatorioCalendario.setActionCommand("Calendário acadêmico");
        jMenuItemRelatorioCalendario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRelatorioCalendarioActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRelatorioCalendario);

        jMenuItem1.setText("Horário de aulas");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItemPermutaAulas.setText("Permuta de aulas");
        jMenuItemPermutaAulas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPermutaAulasActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemPermutaAulas);

        jMenuBar1.add(jMenu4);

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/configuração.png"))); // NOI18N
        jMenu5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jMenuItemAlteraDados.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItemAlteraDados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/perfil.png"))); // NOI18N
        jMenuItemAlteraDados.setText("Perfil");
        jMenuItemAlteraDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAlteraDadosActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItemAlteraDados);

        jMenuItem2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/gerenciador/views/img/sair.png"))); // NOI18N
        jMenuItem2.setText("Sair");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem2);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane_Diretor)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane_Diretor)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jMenuItemCadastroUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastroUsuarioActionPerformed

        try {
            ListUsuario_Diretor lud = new ListUsuario_Diretor();
            jDesktopPane_Diretor.add(lud);
            lud.setVisible(true);
            lud.setPosition();
            jMenuItemCadastroUsuario.setEnabled(false);
            /*Usuario_Diretor usu_diretor = new Usuario_Diretor();
            jDesktopPane_Diretor.add(usu_diretor);
            usu_diretor.setVisible(true);
            usu_diretor.setPosition();*/

            //cad_usuario.setLocation(null);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemCadastroUsuarioActionPerformed

    private void jMenuItemCadastroCalendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastroCalendarioActionPerformed
        try {
            ListCalendarioAcademico cal_academico = new ListCalendarioAcademico();

            jDesktopPane_Diretor.add(cal_academico);
            cal_academico.setVisible(true);
            cal_academico.setPosition();
            jMenuItemCadastroCalendario.setEnabled(false);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItemCadastroCalendarioActionPerformed

    private void jMenuItemCadastroTurmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastroTurmaActionPerformed
        ListTurma_Diretor ltd;
        try {
            ltd = new ListTurma_Diretor();
            jDesktopPane_Diretor.add(ltd);
            ltd.setVisible(true);
            ltd.setPosition();
            jMenuItemCadastroTurma.setEnabled(false);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jMenuItemCadastroTurmaActionPerformed

    private void jMenuItemCadastroMateriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastroMateriaActionPerformed

        try {
            ListMaterias_Diretor lmd = new ListMaterias_Diretor();
            jDesktopPane_Diretor.add(lmd);
            lmd.setVisible(true);
            lmd.setPosition();

            jMenuItemCadastroMateria.setEnabled(false);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jMenuItemCadastroMateriaActionPerformed

    private void jMenuItemCadastraHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCadastraHorarioActionPerformed
        Cadastra_Horario ch = new Cadastra_Horario();
        jDesktopPane_Diretor.add(ch);
        ch.setVisible(true);
        ch.setPosition();

        jMenuItemCadastraHorario.setEnabled(false);
    }//GEN-LAST:event_jMenuItemCadastraHorarioActionPerformed

    private void jMenuItemAlteraHorarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAlteraHorarioActionPerformed
        Consultar_Horarios coh = new Consultar_Horarios();
        jDesktopPane_Diretor.add(coh);
        coh.setVisible(true);
        coh.setPosition();

        jMenuItemAlteraHorario.setEnabled(false);
    }//GEN-LAST:event_jMenuItemAlteraHorarioActionPerformed

    private void jMenuItemRelatorioUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRelatorioUsuariosActionPerformed
        Document doc = new Document();

        String arquivoPdf = "Usuarios.pdf";

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));

            doc.open();

            Paragraph p = new Paragraph("LISTA DE USUÁRIOS DO SISTEMA");
            p.setAlignment(1);
            doc.add(p);
            p = new Paragraph(" ");
            doc.add(p);

            PdfPTable table = new PdfPTable(4);

            PdfPCell cel1 = new PdfPCell(new Paragraph("Código"));
            PdfPCell cel2 = new PdfPCell(new Paragraph("Nome"));
            PdfPCell cel3 = new PdfPCell(new Paragraph("Usuário"));
            PdfPCell cel4 = new PdfPCell(new Paragraph("Função"));

            table.addCell(cel1);
            table.addCell(cel2);
            table.addCell(cel3);
            table.addCell(cel4);

            UsuarioDao ud = new UsuarioDao();
            for (Usuario u : ud.readUsuario()) {
                cel1 = new PdfPCell(new Paragraph(u.getId_usuario() + ""));
                cel2 = new PdfPCell(new Paragraph(u.getNome()));
                cel3 = new PdfPCell(new Paragraph(u.getUsuario()));
                cel4 = new PdfPCell(new Paragraph(u.getCargo()));

                table.addCell(cel1);
                table.addCell(cel2);
                table.addCell(cel3);
                table.addCell(cel4);
            }

            doc.add(table);

            doc.close();

            Desktop.getDesktop().open(new File(arquivoPdf));

        } catch (DocumentException | FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemRelatorioUsuariosActionPerformed

    private void jMenuItemRelatorioMateriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRelatorioMateriasActionPerformed
        Document doc = new Document();

        String arquivoPdf = "Materias.pdf";

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));

            doc.open();

            Paragraph p = new Paragraph("LISTA DE MATÉRIAS DO SISTEMA");
            p.setAlignment(1);
            doc.add(p);
            p = new Paragraph(" ");
            doc.add(p);

            PdfPTable table = new PdfPTable(2);

            PdfPCell cel1 = new PdfPCell(new Paragraph("Código"));
            PdfPCell cel2 = new PdfPCell(new Paragraph("Matéria"));

            table.addCell(cel1);
            table.addCell(cel2);

            MateriaDao md = new MateriaDao();
            for (Materia m : md.readMateria()) {
                cel1 = new PdfPCell(new Paragraph(m.getId_materia() + ""));
                cel2 = new PdfPCell(new Paragraph(m.getMateria()));

                table.addCell(cel1);
                table.addCell(cel2);
            }

            doc.add(table);

            doc.close();

            Desktop.getDesktop().open(new File(arquivoPdf));

        } catch (DocumentException | FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemRelatorioMateriasActionPerformed

    private void jMenuItemRelatorioTurmasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRelatorioTurmasActionPerformed
        Document doc = new Document();

        String arquivoPdf = "Turmas.pdf";

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));

            doc.open();

            Paragraph p = new Paragraph("LISTA DE TURMAS DO SISTEMA");
            p.setAlignment(1);
            doc.add(p);
            p = new Paragraph(" ");
            doc.add(p);

            PdfPTable table = new PdfPTable(4);

            PdfPCell cel1 = new PdfPCell(new Paragraph("Código"));
            PdfPCell cel2 = new PdfPCell(new Paragraph("Série"));
            PdfPCell cel3 = new PdfPCell(new Paragraph("Turma"));
            PdfPCell cel4 = new PdfPCell(new Paragraph("Turno"));

            table.addCell(cel1);
            table.addCell(cel2);
            table.addCell(cel3);
            table.addCell(cel4);

            TurmasDao td = new TurmasDao();
            for (Turmas t : td.readTurmas()) {
                cel1 = new PdfPCell(new Paragraph(t.getId_Turma() + ""));
                cel2 = new PdfPCell(new Paragraph(t.getSerie()));
                cel3 = new PdfPCell(new Paragraph(t.getTurma()));
                cel4 = new PdfPCell(new Paragraph(t.getTurno()));

                table.addCell(cel1);
                table.addCell(cel2);
                table.addCell(cel3);
                table.addCell(cel4);
            }

            doc.add(table);

            doc.close();

            Desktop.getDesktop().open(new File(arquivoPdf));

        } catch (DocumentException | FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemRelatorioTurmasActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Relatorio_HorarioAulas rha = new Relatorio_HorarioAulas();
        jDesktopPane_Diretor.add(rha);
        rha.setVisible(true);
        rha.setPosition();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        Tela_Login tl = new Tela_Login();
        tl.setVisible(true);
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItemAlteraDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAlteraDadosActionPerformed
        try {
            UsuarioDao ud = new UsuarioDao();
            Usuario u = ud.buscaDadosUsuario(idDiretor);

            AlterarDados ad = new AlterarDados(u);

            jDesktopPane_Diretor.add(ad);
            ad.setVisible(true);
            ad.setPosition();
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemAlteraDadosActionPerformed

    private void jMenuItemPermutaAulasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPermutaAulasActionPerformed
        Document doc = new Document();

        String arquivoPdf = "Permutas.pdf";

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));

            doc.open();

            Paragraph p = new Paragraph("LISTA DE PERMUTAS");
            p.setAlignment(1);
            doc.add(p);
            p = new Paragraph(" ");
            doc.add(p);

            PdfPTable table = new PdfPTable(7);

            PdfPCell cel1 = new PdfPCell(new Paragraph("Solicitante"));
            PdfPCell cel2 = new PdfPCell(new Paragraph("Solicitado"));
            PdfPCell cel3 = new PdfPCell(new Paragraph("Turma"));
            PdfPCell cel4 = new PdfPCell(new Paragraph("Aula"));
            PdfPCell cel5 = new PdfPCell(new Paragraph("Data da troca"));
            PdfPCell cel6 = new PdfPCell(new Paragraph("Reposição"));
            PdfPCell cel7 = new PdfPCell(new Paragraph("Observação"));

            table.addCell(cel1);
            table.addCell(cel2);
            table.addCell(cel3);
            table.addCell(cel4);
            table.addCell(cel5);
            table.addCell(cel6);
            table.addCell(cel7);

            PermutaAulasDao pad = new PermutaAulasDao();
            for (PermutaAulas perm : pad.readPermutas()) {
                cel1 = new PdfPCell(new Paragraph(perm.getProf1()));
                cel2 = new PdfPCell(new Paragraph(perm.getProf2()));
                cel3 = new PdfPCell(new Paragraph(perm.getTurma()));
                cel4 = new PdfPCell(new Paragraph(perm.getAula()));
                cel5 = new PdfPCell(new Paragraph(perm.getData1()));
                cel6 = new PdfPCell(new Paragraph(perm.getData2()));
                cel7 = new PdfPCell(new Paragraph(perm.getObs()));

                table.addCell(cel1);
                table.addCell(cel2);
                table.addCell(cel3);
                table.addCell(cel4);
                table.addCell(cel5);
                table.addCell(cel6);
                table.addCell(cel7);
            }

            doc.add(table);

            doc.close();

            Desktop.getDesktop().open(new File(arquivoPdf));

        } catch (DocumentException | FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemPermutaAulasActionPerformed

    private void jMenuItemRelatorioCalendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRelatorioCalendarioActionPerformed
        Document doc = new Document();

        String arquivoPdf = "CalendarioAcademico.pdf";

        try {
            PdfWriter.getInstance(doc, new FileOutputStream(arquivoPdf));

            doc.open();

            Paragraph p = new Paragraph("LISTA DE DATAS DA ESCOLA");
            p.setAlignment(1);
            doc.add(p);
            p = new Paragraph(" ");
            doc.add(p);

            PdfPTable table = new PdfPTable(2);

            PdfPCell cel1 = new PdfPCell(new Paragraph("Data"));
            PdfPCell cel2 = new PdfPCell(new Paragraph("Descrição"));

            table.addCell(cel1);
            table.addCell(cel2);

            CalendarioDao cDao = new CalendarioDao();
        for (Calendario c : cDao.read()) {
                cel1 = new PdfPCell(new Paragraph(c.getData()));
                cel2 = new PdfPCell(new Paragraph(c.getDescricao()));

                table.addCell(cel1);
                table.addCell(cel2);
            }

            doc.add(table);

            doc.close();

            Desktop.getDesktop().open(new File(arquivoPdf));

        } catch (DocumentException | FileNotFoundException ex) {
            System.out.println(ex);
        } catch (IOException ex) {
            System.out.println(ex);
        } catch (SQLException ex) {
            Logger.getLogger(Principal_Diretor.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemRelatorioCalendarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {

        UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");

        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal_Diretor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal_Diretor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal_Diretor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal_Diretor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal_Diretor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JDesktopPane jDesktopPane_Diretor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    public static javax.swing.JMenuItem jMenuItemAlteraDados;
    public static javax.swing.JMenuItem jMenuItemAlteraHorario;
    public static javax.swing.JMenuItem jMenuItemCadastraHorario;
    public static javax.swing.JMenuItem jMenuItemCadastroCalendario;
    public static javax.swing.JMenuItem jMenuItemCadastroMateria;
    public static javax.swing.JMenuItem jMenuItemCadastroTurma;
    public static javax.swing.JMenuItem jMenuItemCadastroUsuario;
    private javax.swing.JMenuItem jMenuItemPermutaAulas;
    private javax.swing.JMenuItem jMenuItemRelatorioCalendario;
    private javax.swing.JMenuItem jMenuItemRelatorioMaterias;
    private javax.swing.JMenuItem jMenuItemRelatorioTurmas;
    private javax.swing.JMenuItem jMenuItemRelatorioUsuarios;
    // End of variables declaration//GEN-END:variables
}
